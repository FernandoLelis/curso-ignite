{
  "version": 3,
  "sources": ["../../../../../node_modules/stable/stable.js"],
  "sourcesContent": ["//! stable.js 0.1.8, https://github.com/Two-Screen/stable\r\n//! Â© 2018 Angry Bytes and contributors. MIT licensed.\r\n\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global.stable = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n  // A stable array sort, because `Array#sort()` is not guaranteed stable.\r\n  // This is an implementation of merge sort, without recursion.\r\n\r\n  var stable = function (arr, comp) {\r\n    return exec(arr.slice(), comp)\r\n  };\r\n\r\n  stable.inplace = function (arr, comp) {\r\n    var result = exec(arr, comp);\r\n\r\n    // This simply copies back if the result isn't in the original array,\r\n    // which happens on an odd number of passes.\r\n    if (result !== arr) {\r\n      pass(result, null, arr.length, arr);\r\n    }\r\n\r\n    return arr\r\n  };\r\n\r\n  // Execute the sort using the input array and a second buffer as work space.\r\n  // Returns one of those two, containing the final result.\r\n  function exec(arr, comp) {\r\n    if (typeof(comp) !== 'function') {\r\n      comp = function (a, b) {\r\n        return String(a).localeCompare(b)\r\n      };\r\n    }\r\n\r\n    // Short-circuit when there's nothing to sort.\r\n    var len = arr.length;\r\n    if (len <= 1) {\r\n      return arr\r\n    }\r\n\r\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\r\n    // Chunks are the size of the left or right hand in merge sort.\r\n    // Stop when the left-hand covers all of the array.\r\n    var buffer = new Array(len);\r\n    for (var chk = 1; chk < len; chk *= 2) {\r\n      pass(arr, comp, chk, buffer);\r\n\r\n      var tmp = arr;\r\n      arr = buffer;\r\n      buffer = tmp;\r\n    }\r\n\r\n    return arr\r\n  }\r\n\r\n  // Run a single pass with the given chunk size.\r\n  var pass = function (arr, comp, chk, result) {\r\n    var len = arr.length;\r\n    var i = 0;\r\n    // Step size / double chunk size.\r\n    var dbl = chk * 2;\r\n    // Bounds of the left and right chunks.\r\n    var l, r, e;\r\n    // Iterators over the left and right chunk.\r\n    var li, ri;\r\n\r\n    // Iterate over pairs of chunks.\r\n    for (l = 0; l < len; l += dbl) {\r\n      r = l + chk;\r\n      e = r + chk;\r\n      if (r > len) r = len;\r\n      if (e > len) e = len;\r\n\r\n      // Iterate both chunks in parallel.\r\n      li = l;\r\n      ri = r;\r\n      while (true) {\r\n        // Compare the chunks.\r\n        if (li < r && ri < e) {\r\n          // This works for a regular `sort()` compatible comparator,\r\n          // but also for a simple comparator like: `a > b`\r\n          if (comp(arr[li], arr[ri]) <= 0) {\r\n            result[i++] = arr[li++];\r\n          }\r\n          else {\r\n            result[i++] = arr[ri++];\r\n          }\r\n        }\r\n        // Nothing to compare, just flush what's left.\r\n        else if (li < r) {\r\n          result[i++] = arr[li++];\r\n        }\r\n        else if (ri < e) {\r\n          result[i++] = arr[ri++];\r\n        }\r\n        // Both iterators are at the chunk ends.\r\n        else {\r\n          break\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return stable;\r\n\r\n})));\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAGA,KAAC,SAAU,QAAQ,SAAS;AAC1B,aAAO,YAAY,YAAY,OAAO,WAAW,cAAc,OAAO,UAAU,QAAQ,IACxF,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,OAAO,IAC1D,OAAO,SAAS,QAAQ;AAAA,IAC3B,GAAE,SAAO,WAAY;AAAE;AAKrB,UAAI,SAAS,SAAU,KAAK,MAAM;AAChC,eAAO,KAAK,IAAI,MAAM,GAAG,IAAI;AAAA,MAC/B;AAEA,aAAO,UAAU,SAAU,KAAK,MAAM;AACpC,YAAI,SAAS,KAAK,KAAK,IAAI;AAI3B,YAAI,WAAW,KAAK;AAClB,eAAK,QAAQ,MAAM,IAAI,QAAQ,GAAG;AAAA,QACpC;AAEA,eAAO;AAAA,MACT;AAIA,eAAS,KAAK,KAAK,MAAM;AACvB,YAAI,OAAO,SAAU,YAAY;AAC/B,iBAAO,SAAU,GAAG,GAAG;AACrB,mBAAO,OAAO,CAAC,EAAE,cAAc,CAAC;AAAA,UAClC;AAAA,QACF;AAGA,YAAI,MAAM,IAAI;AACd,YAAI,OAAO,GAAG;AACZ,iBAAO;AAAA,QACT;AAKA,YAAI,SAAS,IAAI,MAAM,GAAG;AAC1B,iBAAS,MAAM,GAAG,MAAM,KAAK,OAAO,GAAG;AACrC,eAAK,KAAK,MAAM,KAAK,MAAM;AAE3B,cAAI,MAAM;AACV,gBAAM;AACN,mBAAS;AAAA,QACX;AAEA,eAAO;AAAA,MACT;AAGA,UAAI,OAAO,SAAU,KAAK,MAAM,KAAK,QAAQ;AAC3C,YAAI,MAAM,IAAI;AACd,YAAI,IAAI;AAER,YAAI,MAAM,MAAM;AAEhB,YAAI,GAAG,GAAG;AAEV,YAAI,IAAI;AAGR,aAAK,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK;AAC7B,cAAI,IAAI;AACR,cAAI,IAAI;AACR,cAAI,IAAI;AAAK,gBAAI;AACjB,cAAI,IAAI;AAAK,gBAAI;AAGjB,eAAK;AACL,eAAK;AACL,iBAAO,MAAM;AAEX,gBAAI,KAAK,KAAK,KAAK,GAAG;AAGpB,kBAAI,KAAK,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC,KAAK,GAAG;AAC/B,uBAAO,GAAG,IAAI,IAAI,IAAI;AAAA,cACxB,OACK;AACH,uBAAO,GAAG,IAAI,IAAI,IAAI;AAAA,cACxB;AAAA,YACF,WAES,KAAK,GAAG;AACf,qBAAO,GAAG,IAAI,IAAI,IAAI;AAAA,YACxB,WACS,KAAK,GAAG;AACf,qBAAO,GAAG,IAAI,IAAI,IAAI;AAAA,YACxB,OAEK;AACH;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IAET,CAAE;AAAA;AAAA;",
  "names": []
}
